//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Todos = newTodosTable("public", "todos", "")

type todosTable struct {
	postgres.Table

	// Columns
	ID   postgres.ColumnString
	Task postgres.ColumnString
	Due  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TodosTable struct {
	todosTable

	EXCLUDED todosTable
}

// AS creates new TodosTable with assigned alias
func (a TodosTable) AS(alias string) *TodosTable {
	return newTodosTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TodosTable with assigned schema name
func (a TodosTable) FromSchema(schemaName string) *TodosTable {
	return newTodosTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TodosTable with assigned table prefix
func (a TodosTable) WithPrefix(prefix string) *TodosTable {
	return newTodosTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TodosTable with assigned table suffix
func (a TodosTable) WithSuffix(suffix string) *TodosTable {
	return newTodosTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTodosTable(schemaName, tableName, alias string) *TodosTable {
	return &TodosTable{
		todosTable: newTodosTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newTodosTableImpl("", "excluded", ""),
	}
}

func newTodosTableImpl(schemaName, tableName, alias string) todosTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		TaskColumn     = postgres.StringColumn("task")
		DueColumn      = postgres.TimestampColumn("due")
		allColumns     = postgres.ColumnList{IDColumn, TaskColumn, DueColumn}
		mutableColumns = postgres.ColumnList{TaskColumn, DueColumn}
	)

	return todosTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Task: TaskColumn,
		Due:  DueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
